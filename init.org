* init.elc ビルド用の Makefile
#+begin_src makefile
EMACS	?= emacs
all: init.elc
init.el: init.org
	$(EMACS) -Q -q --batch --eval \
		"(progn \
			(require 'ob-tangle) \
			(org-babel-tangle-file \"$<\" \"$@\" \"emacs-lisp\"))"
	$(EMACS) -q -l init.el --batch --eval "(run-hooks 'after-init-hook)"
%.elc: %.el
	$(EMACS) -q -l init.el --batch -f batch-byte-compile $<
#+end_src

* init.el 本体
** おまじない
#+begin_src emacs-lisp
;; -*- lexical-binding: t -*-
#+end_src

** emacs -q -lした時に、user-emacs-directoryが変わるように
#+begin_src emacs-lisp
(when load-file-name
  (setq user-emacs-directory (file-name-directory load-file-name)))
#+end_src

** M-x customize したときの設定保存場所を変える
#+begin_src emacs-lisp
(setq custom-file (locate-user-emacs-file "customize.el"))
(when (file-readable-p custom-file)
  (load-file custom-file))
#+end_src

** /site-lisp を load-path に追加
#+begin_src emacs-lisp
(add-to-list 'load-path (locate-user-emacs-file "site-lisp"))
#+end_src

** basic key bindings
*** C-hをbackspaceにする
#+begin_src emacs-lisp
(define-key key-translation-map (kbd "C-h") (kbd "DEL"))
(define-key key-translation-map (kbd "M-h") (kbd "M-DEL"))
#+end_src

*** command と option をどちらも meta として扱う
#+begin_src emacs-lisp
(setq mac-command-modifier 'meta)
(setq mac-option-modifier 'meta)
#+end_src

*** 誤って終了しないようにする
#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-C") 'server-edit)
(global-unset-key (kbd "C-z"))
(defalias 'exit 'save-buffers-kill-terminal)
#+end_src

*** hippie-expandを使う
#+begin_src emacs-lisp :tangle no
(substitute-key-definition 'dabbrev-expand 'hippie-expand global-map)
#+end_src

** setup package-manager and leaf
*** install leaf
#+begin_src emacs-lisp
(prog1 "leaf"
  (prog1 "install leaf"
    (custom-set-variables
     '(package-archives '(("org"   . "https://orgmode.org/elpa/")
                          ("melpa" . "https://melpa.org/packages/")
                          ("gnu"   . "https://elpa.gnu.org/packages/"))))
    (package-initialize)
    (unless (package-installed-p 'leaf)
      (package-refresh-contents)
      (package-install 'leaf)))

  (leaf leaf-keywords
    :ensure t
    :config
    ;; initialize leaf-keywords.el
    (leaf-keywords-init)))
#+end_src

*** install feather.el
#+begin_src emacs-lisp :tangle no
(leaf feather
  :ensure async-await
  :require feather
  :load-path* "feather.el"
  :config (feather-setup))
#+end_src

** 基本的なUI/UX設定
*** フォント設定
#+begin_src emacs-lisp
(defvar my-font-size 140)
(set-face-attribute 'default nil :family "Source Han Code JP" :height my-font-size)
(setq-default line-spacing 5)
#+end_src
*** posframeの不具合対処のため、nativeのfullscreenは使わない
#+begin_src emacs-lisp
(setq ns-use-native-fullscreen nil)
#+end_src

*** 各種バーを消す
#+begin_src emacs-lisp
;; (setq-default mode-line-format nil) ;; 思ったより不便だったのでモードライン非表示はやめる
;; (menu-bar-mode -1) ;; native fullscreen にするために表示させる
(when (fboundp #'tool-bar-mode)
  (tool-bar-mode -1))
(when (fboundp #'scroll-bar-mode)
  (scroll-bar-mode -1))
#+end_src

*** emacs-macport のタブを使う
#+begin_src emacs-lisp
(leaf macport-tabbing
  :when (eq window-system 'mac)
  :custom ((mac-frame-tabbing . t))
  :bind (("C-t" . nil)
         ("C-t C-c" . make-frame-command)
         ("C-t C-n" . mac-next-tab)
         ("C-t C-p" . mac-previous-tab)
         ("C-t C-k" . delete-frame)))
#+end_src

*** 折り返し表示まわり
#+begin_src emacs-lisp
(setq-default truncate-lines nil)
(setq truncate-partial-width-windows t)
#+end_src

*** 雑多な設定
**** いろいろな show の delay
#+begin_src emacs-lisp
(defvar my-show-delay 0.125)
#+end_src

**** インデントにタブを使わない
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
#+end_src

**** 行の先頭で C-k を一回押すだけで行全体を消去する
#+begin_src emacs-lisp
(setq kill-whole-line t)
#+end_src

**** 最終行に必ず一行挿入する
#+begin_src emacs-lisp
(setq require-final-newline t)
#+end_src

**** 補完時に大文字小文字を区別しない
#+begin_src emacs-lisp
(setq completion-ignore-case t)
(setq read-file-name-completion-ignore-case t)
#+end_src

**** ファイル先頭に #!...があるファイルを保存すると実行権をつける
#+begin_src emacs-lisp
(add-hook 'after-save-hook #'executable-make-buffer-file-executable-if-script-p)
#+end_src

**** gz ファイルも編集できるようにする
#+begin_src emacs-lisp
(auto-compression-mode t)
#+end_src

**** バックアップファイルの場所変更
#+begin_src emacs-lisp
(setq backup-directory-alist `((".*" . ,(locate-user-emacs-file "backup"))))
#+end_src

**** シンボリックリンクまわり
#+begin_src emacs-lisp
(setq vc-follow-symlinks t)
(setq auto-revert-check-vc-info t)
#+end_src

**** スクロール時にカーソルの相対位置を保つ
#+begin_src emacs-lisp
(setq scroll-preserve-screen-position :always)
#+end_src

**** カーソルの位置が何文字目かを表示する
#+begin_src emacs-lisp
(add-hook 'emacs-startup-hook #'column-number-mode)
#+end_src

**** カーソルの位置が何行目かを表示する
#+begin_src emacs-lisp
(add-hook 'emacs-startup-hook #'line-number-mode)
#+end_src

**** 左に行番号を表示
#+begin_src emacs-lisp
(add-hook 'emacs-startup-hook #'global-display-line-numbers-mode)
#+end_src

**** electric-pair-mode
#+begin_src emacs-lisp :tangle no
(add-hook 'emacs-startup-hook #'electric-pair-mode)
#+end_src

**** prettify
#+begin_src emacs-lisp
(add-hook 'emacs-startup-hook #'global-prettify-symbols-mode)
#+end_src

**** 対応する括弧を表示
#+begin_src emacs-lisp
(add-hook 'emacs-startup-hook #'show-paren-mode)
#+end_src

**** emacsclientを使う
#+begin_src emacs-lisp
(add-hook 'emacs-startup-hook #'server-start)
#+end_src

**** 最近開いたファイル
#+begin_src emacs-lisp
(add-hook 'emacs-startup-hook #'recentf-mode)
#+end_src

**** mac固有設定まわり
***** emacs-mac はこっち
#+begin_src emacs-lisp
(leaf input-emacs-mac
  :leaf-autoload nil
  :leaf-defer nil
  :when (fboundp #'mac-auto-ascii-mode)
  :load-path `(,(locate-user-emacs-file "site-lisp"))
  :require fix-mac-auto-ascii-mode
  :hook (emacs-startup-hook . mac-auto-ascii-mode))
#+end_src

***** inline-patch はこっち
#+begin_src emacs-lisp
(leaf inline-patched
  :when (fboundp #'mac-input-method-mode)
  :init (mac-input-method-mode 1))
#+end_src

***** Macで使うときにGNU lsがあったらそれを使う設定
#+begin_src emacs-lisp
(leaf use-gls-when-darwin
  :when (and (eq system-type 'darwin) (executable-find "gls"))
  :custom ((insert-directory-program . "gls")))
#+end_src

** package setup
*** theme
#+begin_src emacs-lisp :tangle no
(leaf doom-themes
  :ensure t
  :config
  (load-theme 'doom-one t))
#+end_src

#+begin_src emacs-lisp
(leaf solarized-theme
  :ensure t
  :config
  (load-theme 'solarized-dark t))
#+end_src

*** exec-path-from-shell
#+begin_src emacs-lisp
(leaf exec-path-from-shell
  :ensure t
  :require t
  :config
  (add-to-list 'exec-path-from-shell-variables "EMAIL")
  (exec-path-from-shell-initialize))
#+end_src

*** ace-window
#+begin_src emacs-lisp
(leaf ace-window
  :ensure t
  :custom ((aw-scope . 'frame))
  :bind ("C-c o" . ace-window))
#+end_src

*** minibufferにmodelineの情報を出すやつ
#+begin_src emacs-lisp
(leaf smart-mode-line
  :ensure t
  :custom (sml/no-confirm-load-theme . t)
  :hook (emacs-startup-hook . sml/setup))
(leaf rich-minority
  :ensure t
  :custom ((rm-blacklist . nil)
           (rm-whitelist . "fly\\|lsp"))
  :hook (emacs-startup-hook . rich-minority-mode))
(leaf mini-modeline
  :ensure t
  :hook (emacs-startup-hook . mini-modeline-mode))
#+end_src

*** languages
#+begin_src emacs-lisp
(leaf go-mode
  :ensure t)
(leaf rust-mode
  :ensure t)
(leaf dockerfile-mode
  :ensure t)
(leaf yaml-mode
  :ensure t)
(leaf fish-mode
  :ensure t)
(leaf markdown-mode
  :ensure t)
(leaf edit-indirect
  :ensure t)
(leaf json-mode
  :ensure t)
(leaf web-mode
  :ensure t
  :mode ("\\.html?\\'" "\\.jsx?\\'" "\\.tsx?\\'"))
#+end_src

*** language server protocol
#+begin_src emacs-lisp :tangle no
(leaf lsp-mode
  :ensure t
  :custom ((lsp-prefer-flymake . nil)
           (lsp-auto-guess-root . t)
           (lsp-document-sync-method . 'incremental)
           (lsp-enable-completion-at-point . nil))
  :hook ((go-mode-hook . lsp)
         (rust-mode-hook . lsp)
         (scala-mode-hook . lsp)
         (web-mode-hook . lsp)))
(leaf lsp-ui
  :ensure t
  :hook ((lsp-mode-hook . lsp-ui-mode)))
(leaf company-lsp
  :ensure t
  :after company-mode
  :custom ((company-lsp-cache-candidates . t)
           (company-lsp-async . t)
           (company-lsp-enable-recompletion . nil))
  :config ((add-to-list 'company-backends 'company-lsp)))
#+end_src

*** projectile
#+begin_src emacs-lisp
(leaf projectile
  :ensure t
  :bind (:projectile-mode-map ("C-c p" . projectile-command-map))
  :custom (projectile-completion-system . 'ivy)
  :hook (emacs-startup-hook . projectile-mode))
#+end_src

*** flycheck
#+begin_src emacs-lisp
(leaf flycheck
  :ensure t
  :hook ((emacs-startup-hook . global-flycheck-mode)))
#+end_src

*** fuz.el
#+begin_src emacs-lisp
(leaf fuz
  :ensure t
  :commands fuz-build-and-load-dymod
  :init (defun load-fuz-core () (unless (require 'fuz-core nil t) (fuz-build-and-load-dymod)))
  :hook (after-init-hook . load-fuz-core))
#+end_src

*** prescient
#+begin_src emacs-lisp
(leaf prescient
  :ensure t
  :hook ((emacs-startup-hook . prescient-persist-mode)))
(leaf company-prescient
  :ensure t
  :hook (emacs-startup-hook . company-prescient-mode))
#+end_src

*** company
#+begin_src emacs-lisp
(leaf company
  :ensure t
  :hook (emacs-startup-hook . global-company-mode)
  :custom (company-global-modes . '(not org-mode text-mode)))
(leaf company-posframe
  :ensure t
  :hook (emacs-startup-hook . company-posframe-mode))
#+end_src

*** ivy, counsel, swiper
#+begin_src emacs-lisp
(leaf ivy
  :ensure t
  :hook ((emacs-startup-hook . ivy-mode)))
(leaf counsel
  :ensure t
  :hook (emacs-startup-hook . counsel-mode))
(leaf swiper
  :ensure t
  :bind ("M-s M-s" . swiper))
(leaf ivy-prescient
  :ensure t
  :hook ((emacs-startup-hook . ivy-prescient-mode)))
(leaf ivy-yasnippet
  :ensure t
  :after ivy yasnippet
  :bind (("C-c y" . ivy-yasnippet)))
(leaf ivy-fuz
  :ensure t
  :after ivy
  :custom
  ((ivy-sort-matches-functions-alist '((t . ivy-fuz-sort-fn)))
   (ivy-re-builders-alist '((t . ivy-fuz-regex-fuzzy))))
  :config
  (add-to-list 'ivy-highlight-functions-alist '(ivy-fuz-regex-fuzzy . ivy-fuz-highlight-fn)))
#+end_src

*** helm
#+begin_src emacs-lisp :tangle no
(leaf helm
  :ensure t
  :require helm-config
  :hook (emacs-startup-hook . helm-mode)
  :bind (("M-x" . helm-M-x)
         ("C-x C-f" . helm-find-files)
         ("C-x C-b" . helm-buffers-list)
         ([remap dabbrev-expand] . helm-dabbrev)
         ("M-s o" . helm-occur)
         ("M-y" . helm-show-kill-ring)))

(leaf helm-descbinds
  :ensure t
  :after helm
  :bind (("C-h b" . helm-descbinds)))

(leaf helm-fuz
  :ensure t
  :after helm
  :hook (emacs-startup-hook . helm-fuz-mode))

(leaf helm-ghq
  :ensure t
  :after helm
  :bind (("C-c h" . helm-ghq)))

(leaf helm-c-yasnippet
  :ensure t
  :after helm
  :bind (("C-c y" . helm-yas-complete)))
#+end_src

*** expand-region
#+begin_src emacs-lisp :tangle no
(leaf expand-region
  :ensure t
  :bind (("C-c e" . er/expand-region)))
#+end_src

*** smartparens
#+begin_src emacs-lisp
(leaf smartparens
  :ensure t
  :require smartparens-config
  :hook ((prog-mode-hook . smartparens-mode)))
#+end_src

*** git-gutter
#+begin_src emacs-lisp
(leaf git-gutter
  :ensure t
  :hook ((emacs-startup-hook . global-git-gutter-mode)))
#+end_src

#+begin_src emacs-lisp
(leaf git-gutter-fringe
  :ensure t
  :require t)
#+end_src

*** evil
#+begin_src emacs-lisp :tangle no
(leaf evil
  :ensure t
  :custom ((evil-want-keybinding . nil)
           (evil-want-C-u-scroll . t))
  :hook ((emacs-startup-hook . evil-mode)))
(leaf evil-collection
  :ensure t
  :after evil
  :hook ((emacs-startup-hook . evil-collection-init)))
#+end_src

#+begin_src emacs-lisp :tangle no
(leaf evil-magit
  :ensure t
  :require t)
#+end_src

*** editorconfig
#+begin_src emacs-lisp
(leaf editorconfig
  :ensure t
  :hook (emacs-startup-hook . editorconfig-mode))
#+end_src

*** outshine
#+begin_src emacs-lisp
(leaf outshine
  :ensure t
  :bind (("C-c q" . outshine-cycle)))
#+end_src

*** highlight-symbol
#+begin_src emacs-lisp
(leaf highlight-symbol
  :ensure t
  :hook (emacs-startup-hook . highlight-symbol-mode))
#+end_src

*** M-n, M-pとかの区切りを日本語対応するやつ
#+begin_src emacs-lisp
(leaf jaword
  :ensure t
  :hook (emacs-startup-hook . global-jaword-mode))
#+end_src

*** C-yとかで変更のあった場所をハイライトするやつ
#+begin_src emacs-lisp
(leaf volatile-highlights
  :ensure t
  :hook (emacs-startup-hook . volatile-highlights-mode))
#+end_src

*** 途中までコマンドのキー入力したら候補を表示するやつ
#+begin_src emacs-lisp
(leaf which-key
  :ensure t
  :hook (emacs-startup-hook . which-key-mode))
#+end_src

*** 括弧のネストに合わせて色をつけるやつ
#+begin_src emacs-lisp
(leaf rainbow-delimiters
  :ensure t
  :hook (prog-mode-hook . rainbow-delimiters-mode-enable))
#+end_src

*** replace処理を見やすくする
#+begin_src emacs-lisp
(leaf visual-regexp
  :ensure t
  :custom ((vr/plain . t))
  :bind (("C-c r" . vr/replace)))
#+end_src

*** regexpをpythonのやつをつかえるようにする
#+begin_src emacs-lisp :tangle no
(leaf visual-regexp-steroids
  :ensure t
  :require t
  :after visual-regexp)
#+end_src

*** undo強化
#+begin_src emacs-lisp
(leaf undo-tree
  :ensure t
  :hook (emacs-startup-hook . global-undo-tree-mode))
#+end_src

*** snippet
#+begin_src emacs-lisp
(leaf yasnippet
  :ensure t
  :hook (emacs-startup-hook . yas-global-mode)
  :config
  (add-to-list 'hippie-expand-try-functions-list 'yas-hippie-try-expand))
(leaf yasnippet-snippets
  :ensure t
  :require t
  :after yasnippet)
#+end_src

#+begin_src emacs-lisp :tangle no
#+end_src

*** magit
#+begin_src emacs-lisp
(leaf magit
  :ensure t
  :bind (("C-c g" . magit-status)))
#+end_src

*** direnv
#+begin_src emacs-lisp
(leaf direnv
  :ensure t
  :hook (emacs-startup-hook . direnv-mode))
#+end_src

*** eldoc
#+begin_src emacs-lisp
(leaf eldoc
  :custom ((eldoc-idle-delay . my-show-delay)
           (eldoc-echo-area-use-multiline-p . t)))
#+end_src

*** dired
#+begin_src emacs-lisp
(leaf dired
  :require dired dired-x
  :custom ((dired-listing-switches . "-alh")
           ;; diredを2つのウィンドウで開いている時に、デフォルトの移動orコピー先をもう一方のdiredで開いているディレクトリにする
           (dired-dwim-target . t)
           ;; ディレクトリを再帰的にコピーする
           (dired-recursive-copies . 'always)
           ;; diredバッファでC-sした時にファイル名だけにマッチするように
           (dired-isearch-filenames . t)))
#+end_src

*** hl-line
#+begin_src emacs-lisp
(leaf hl-line
  :defun global-hl-line-timer-function
  :require hl-line
  :init
  (defun global-hl-line-timer-function ()
    (global-hl-line-unhighlight-all)
    (let ((global-hl-line-mode t))
      (global-hl-line-highlight)))
  :setq `(global-hl-line-timer . ,(run-with-idle-timer my-show-delay t 'global-hl-line-timer-function)))
#+end_src

*** org-mode
#+begin_src emacs-lisp
(leaf org
  :ensure org org-plus-contrib
  :commands (org-clock-is-active)
  :bind (("C-c c" . org-capture)
         ("C-c a" . org-agenda))
  :custom ((org-src-preserve-indentation . t)
           (org-log-done . 'time)
           (org-use-speed-commands . t)
           (org-directory . "~/org")
           (org-agenda-files . '("~/org/task.org"))
           (org-refile-targets . '((nil . (:level . 1))
                                   (org-agenda-files . (:level . 1))))
           (org-capture-templates . '(("m" "MEMO" entry (file+olp+datetree "memo.org" "Memo") "***** %U\n%?")
                                      ("d" "DIARY" entry (file+olp+datetree "diary.org" "Diary") "***** %?\n")
                                      ("t" "TRPG" entry (file+headline "trpg.org" "TRPG") "** %?\n" :jump-to-captured t)
                                      ("w" "TODO" entry (file+headline "task.org" "Task") "** TODO %?\n")))))

(leaf ox-hugo
  :ensure t
  :after ox)
#+end_src

#+begin_src emacs-lisp
(leaf ox-pygmentize-html
  :after ox
  :require t
  :custom ((org-html-html5-fancy . t)
           (org-html-doctype . "html5")))
#+end_src
